library(usethis)
usethis::edit_r_environ()
library(cflfastR)
library(cflfastR, lib.loc = '~/Downloads/cflfastR')
find.package('cflfastR')
find.package('cfbfastR')
library(devtools)
build()
library(cflfastR)
library(cflfastR, lib.loc = "/Users/garrett.mcclintock/Downloads/cflfastR_0.0.0.9000.tar.gz")
devtools::install_local()
library(cflfastR)
has_cfl_key()
cflfastR::has_cfl_key()
library(devtools)
devtools::load_all(".")
devtools::check()
library(cflfastR)
has_cfl_key()
library(tidyverse)
devtools::load_all(".")
cfl_key()
build_url <- function(url) {
if (length(getOption('tidyCFL.api_key'))==0) {
stop("The api_key is required, start by adding `CFL_API_KEY=XXXX-YOUR-API-KEY-HERE-XXXXX` to your .Renviron file.")
}
if (length(grep('\\?', url)) == 0) {
paste0(url, '?key=', cfl_api_key())
} else {
paste0(url, '&key=', cfl_api_key())
}
}
cfl_games <- function(season = NA, game_id = NA) {
if (is.na(season)) {
stop("A season year is required to find game_id data", call. = FALSE)
} else if (!is.na(season) && is.na(game_id)) {
url <- paste0('http://api.cfl.ca/v1', '/games/',
season)
} else {
url <- paste0('http://api.cfl.ca/v1', '/games/', season,
'/game/', game_id)
}
url <- tidyCFL.build_url(url)
games_call <- httr::GET(url)
httr::stop_for_status(games_call)
games_data_JSON <- httr::content(games_call)
if(length(games_call) == 0) {
games_data <- dplyr::tbl_df()
} else {
games_data <- dplyr::bind_rows(
lapply(1:length(games_data_JSON$data),
function(x) flatten_single_game(games_data_JSON$data[[x]])
)
)
}
if (nrow(games_data) == 0) {
# stop("No data found", call. = FALSE)
NULL
} else {
games_data
}
}
games <- cfl_games(2019)
cfl_games <- function(season = NA, game_id = NA) {
if (is.na(season)) {
stop("A season year is required to find game_id data", call. = FALSE)
} else if (!is.na(season) && is.na(game_id)) {
url <- paste0('http://api.cfl.ca/v1', '/games/',
season)
} else {
url <- paste0('http://api.cfl.ca/v1', '/games/', season,
'/game/', game_id)
}
url <- build_url(url)
games_call <- httr::GET(url)
httr::stop_for_status(games_call)
games_data_JSON <- httr::content(games_call)
if(length(games_call) == 0) {
games_data <- dplyr::tbl_df()
} else {
games_data <- dplyr::bind_rows(
lapply(1:length(games_data_JSON$data),
function(x) flatten_single_game(games_data_JSON$data[[x]])
)
)
}
if (nrow(games_data) == 0) {
# stop("No data found", call. = FALSE)
NULL
} else {
games_data
}
}
games <- cfl_games(2019)
build_url <- function(url) {
if (!has_cfbd_key()) {
stop("The api_key is required, start by adding `CFL_API_KEY=XXXX-YOUR-API-KEY-HERE-XXXXX` to your .Renviron file.")
}
if (length(grep('\\?', url)) == 0) {
paste0(url, '?key=', cfl_api_key())
} else {
paste0(url, '&key=', cfl_api_key())
}
}
build_url <- function(url) {
if (!has_cfl_key()) {
stop("The api_key is required, start by adding `CFL_API_KEY=XXXX-YOUR-API-KEY-HERE-XXXXX` to your .Renviron file.")
}
if (length(grep('\\?', url)) == 0) {
paste0(url, '?key=', cfl_api_key())
} else {
paste0(url, '&key=', cfl_api_key())
}
}
cfl_games <- function(season = NA, game_id = NA) {
if (is.na(season)) {
stop("A season year is required to find game_id data", call. = FALSE)
} else if (!is.na(season) && is.na(game_id)) {
url <- paste0('http://api.cfl.ca/v1', '/games/',
season)
} else {
url <- paste0('http://api.cfl.ca/v1', '/games/', season,
'/game/', game_id)
}
url <- build_url(url)
games_call <- httr::GET(url)
httr::stop_for_status(games_call)
games_data_JSON <- httr::content(games_call)
if(length(games_call) == 0) {
games_data <- dplyr::tbl_df()
} else {
games_data <- dplyr::bind_rows(
lapply(1:length(games_data_JSON$data),
function(x) flatten_single_game(games_data_JSON$data[[x]])
)
)
}
if (nrow(games_data) == 0) {
# stop("No data found", call. = FALSE)
NULL
} else {
games_data
}
}
games <- cfl_games(2019)
cfl_api_key()
devtools::load_all(".")
cfl_api_key()
build_url <- function(url) {
if (!has_cfl_key()) {
stop("The api_key is required, start by adding `CFL_API_KEY=XXXX-YOUR-API-KEY-HERE-XXXXX` to your .Renviron file.")
}
if (length(grep('\\?', url)) == 0) {
paste0(url, '?key=', cfl_key())
} else {
paste0(url, '&key=', cfl_key())
}
}
games <- cfl_games(2019)
flatten_single_game <- function(single_game_JSON) {
result1 <- dplyr::bind_rows(single_game_JSON[c("game_id", "date_start", "game_number", "week", "season", "attendance")])
home <- ifelse(single_game_JSON$team_1$is_at_home, "team_1", "team_2")
away <- ifelse(home == 'team_1', 'team_2', 'team_1')
result2 <- data.frame(
event_type = single_game_JSON$event_type$name,
venue = single_game_JSON$venue$name,
coin_toss = single_game_JSON$coin_toss$coin_toss_winner,
winner = ifelse(
single_game_JSON$event_status$name == 'Pre-Game',
NA,
ifelse(
single_game_JSON$team_1$is_winner,
single_game_JSON$team_1$abbreviation,
single_game_JSON$team_2$abbreviation
)
),
home_team = single_game_JSON[[home]]$abbreviation,
away_team = single_game_JSON[[away]]$abbreviation,
home_score = single_game_JSON[[home]]$score,
away_score = single_game_JSON[[away]]$score,
stringsAsFactors = FALSE
)
return(dplyr::tbl_df(cbind(result1, result2)))
}
games <- cfl_games(2019)
season = 2019
url <- paste0('http://api.cfl.ca/v1', '/games/',
season)
url <- build_url(url)
games_call <- httr::GET(url)
httr::stop_for_status(games_call)
games_data_JSON <- httr::content(games_call)
View(games_data_JSON)
View(games)
devtools::install_github("mdlincoln/docthis")
summary.default(games)
View(games)
View(games_data_JSON)
devtools::load_all(".")
devtools::load_all(".")
games <- cfl_game_info(2015)
devtools::load_all(".")
games <- cfl_game_info(2015)
years <- range(1873,2020)
years <- range(1873:2020)
years <- 1873:2020
for y in years {
x <- cfl_game_info(y)
games <- bind_rows(x, games)
Sys.sleep(2)
}
for (y in years) {
x <- cfl_game_info(y)
games <- bind_rows(x, games)
Sys.sleep(2)
}
games <- data.frame()
years <- 2000:2020
for (y in years) {
x <- cfl_game_info(y)
games <- bind_rows(x, games)
Sys.sleep(2)
}
View(games)
library(tidyverse)
calendar <- summarise(.data = x, .groups = c("season","event_type","week"), first_game_start = min(date_start), last_game_start = max(date_start))
calendar <- summarise(.data = x, .groups = keep first_game_start = min(date_start), last_game_start = max(date_start))
calendar <- summarise(.data = x, .groups = keep, first_game_start = min(date_start), last_game_start = max(date_start))
calendar <- group_by(.data = x, season, week, event_type)
calendar <- summarise(.data = group_by(.data = x, season, week, event_type), first_game_start = min(date_start), last_game_start = max(date_start))
View(calendar)
devtools::load_all(".")
devtools::load_all(".")
cal <- cfl_calendar(2015)
View(cal)
cal <- summarise(.data = group_by(.data = x, season, week, event_type), first_game_start = min(date_start), last_game_start = max(date_start))
cal <- arrange(summarise(.data = group_by(.data = x, season, week, event_type), first_game_start = min(date_start), last_game_start = max(date_start)), first_game_start)
View(cal)
devtools::load_all(".")
cal <- cfl_calendar(2015)
View(cal)
